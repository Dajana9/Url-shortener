{"version":3,"sources":["urlPublic.js","urlAdmin.js","router.js","App.js","serviceWorker.js","index.js"],"names":["formStyle","css","previewStyle","previewUrlStyle","linkStyle","submitStyle","inputStyle","refreshStyle","UrlPubilc","state","originalUrl","shortUrl","removeEmptyElements","filter","e","getUrl","event","a","preventDefault","originalUrlHelper","console","log","axios","post","headers","crossdomain","then","response","setState","data","catch","error","onUrlEnter","pos","helper","target","value","refreshUrls","previewUrls","this","length","map","url","className","key","window","location","href","decodeURIComponent","onSubmit","onChange","onClick","to","React","Component","inputStle","containerStyle","buttonStyle","urlsStyle","shortUrlStyle","UrlAdmin","password","username","getAllUrls","get","auth","allUrls","item","Router","path","component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36289f48.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport {css} from 'emotion';\nimport {Link} from 'react-router-dom';\n\nconst formStyle = css`\n    display: flex;\n    flex-direction: column;\n    margin: 20px;\n`;\n\nconst previewStyle = css`\n    display: flex;\n    flex-direction: row;\n    margin: 20px;\n`;\n\nconst previewUrlStyle = css`\n    margin: 20px;\n`;\n\nconst linkStyle = css``;\n\nconst submitStyle = css`\n    width: 100px;\n    height: 60px;\n    margin: 10px;\n    border-radius: 10px;\n    background-color: #cccccc;\n    font-size: 15px;\n    font-weight: 500;\n`;\n\nconst inputStyle = css`\n    width: 80%;\n    margin: 10px 0;\n    height: 20px;\n    border: 1px solid black;\n`;\n\nconst refreshStyle = css`\n    width: 100px;\n    height: 60px;\n    margin: 10px 50px 0 30px;\n    border-radius: 10px;\n    background-color: #cccccc;\n    font-size: 15px;\n    font-weight: 500;\n`;\n\nexport class UrlPubilc extends React.Component {\n    state = {\n        originalUrl: [],\n        shortUrl: ''\n    };\n\n    removeEmptyElements = originalUrl => {\n        return originalUrl.filter(e => typeof e === 'string' && e !== '');\n    };\n\n    getUrl = async event => {\n        event.preventDefault();\n        const {originalUrl} = this.state;\n        const originalUrlHelper = this.removeEmptyElements(originalUrl);\n        console.log(originalUrl);\n        await axios\n            .post(\n                '/api/url/',\n                {originalUrl: originalUrlHelper},\n                {\n                    headers: {\n                        'Access-Control-Allow-Origin': '*'\n                    },\n                    crossdomain: true\n                }\n            )\n            .then(response => {\n                console.log(response);\n                this.setState({shortUrl: response.data});\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    };\n\n    onUrlEnter = (event, pos) => {\n        const {originalUrl} = this.state;\n        const helper = originalUrl;\n        helper[pos] = event.target.value;\n        this.setState({originalUrl: helper});\n    };\n\n    refreshUrls = event => {\n        this.setState({originalUrl: [], shortUrl: []});\n    };\n\n    render() {\n        const {shortUrl} = this.state;\n        let previewUrls;\n        if (shortUrl.length > 0) {\n            previewUrls = shortUrl.map(url => {\n                return (\n                    <div className={previewStyle} key={url.shortUrl}>\n                        <div className={previewUrlStyle}>\n                            {window.location.href}\n                            {/* http://127.0.0.1:8000/ */}\n                            {url.shortUrl}\n                        </div>\n                        <div className={previewUrlStyle}>{decodeURIComponent(url.originalUrl)}</div>\n                    </div>\n                );\n            });\n        }\n        return (\n            <div>\n                {shortUrl.length === 0 && (\n                    <form onSubmit={this.getUrl} className={formStyle}>\n                        Enter urls you want to shorten:\n                        <input className={inputStyle} onChange={event => this.onUrlEnter(event, 0)}></input>\n                        <input className={inputStyle} onChange={event => this.onUrlEnter(event, 1)}></input>\n                        <input className={inputStyle} onChange={event => this.onUrlEnter(event, 2)}></input>\n                        <button className={submitStyle}>Submit</button>\n                    </form>\n                )}\n                {previewUrls}\n                <button className={refreshStyle} onClick={this.refreshUrls}>\n                    Refresh\n                </button>\n                <Link to={'/urladmin/'} className={linkStyle}>\n                    Go to Admin page\n                </Link>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport {css} from 'emotion';\nimport {Link} from 'react-router-dom';\n\nconst inputStle = css`\n    width: 200px;\n    margin: 10px 0 20px 0;\n    height: 20px;\n`;\n\nconst containerStyle = css`\n    display: flex;\n    flex-direction: column;\n    margin: 20px;\n`;\n\nconst linkStyle = css`\n    margin: 20px;\n`;\n\nconst buttonStyle = css`\n    width: 100px;\n    height: 60px;\n    margin: 10px;\n    border-radius: 10px;\n    background-color: #cccccc;\n    font-size: 15px;\n    font-weight: 500;\n`;\n\nconst urlsStyle = css`\n    display: flex;\n    flex-direction: row;\n    flex-grow: 1;\n    padding: 5px;\n`;\n\nconst shortUrlStyle = css`\n    width: 300px;\n`;\nexport class UrlAdmin extends React.Component {\n    state = {\n        password: '',\n        username: '',\n        data: []\n    };\n\n    getAllUrls = async event => {\n        event.preventDefault();\n        const {username, password} = this.state;\n        await axios\n            .get('/api/url/', {\n                headers: {\n                    'Access-Control-Allow-Origin': '*'\n                },\n                crossdomain: true,\n                auth: {\n                    username: username,\n                    password: password\n                }\n            })\n            .then(response => {\n                this.setState({data: response.data});\n                console.log(response);\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    };\n\n    username = event => {\n        this.setState({username: event.target.value});\n    };\n\n    password = event => {\n        this.setState({password: event.target.value});\n    };\n\n    render() {\n        const {data} = this.state;\n        const allUrls = data.map(item => {\n            return (\n                <div className={urlsStyle} key={item.shortUrl}>\n                    <div className={shortUrlStyle}>http://127.0.0.1:8000/{item.shortUrl}</div>\n                    <div>{decodeURIComponent(item.originalUrl)}</div>\n                </div>\n            );\n        });\n        return (\n            <div className={containerStyle}>\n                Username<input className={inputStle} onChange={this.username}></input>\n                Password<input className={inputStle} onChange={this.password}></input>\n                <button className={buttonStyle} onClick={this.getAllUrls}>\n                    Get all urls\n                </button>\n                <Link to={'/'} className={linkStyle}>\n                    Create short urls\n                </Link>\n                {allUrls}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport {UrlPubilc} from './urlPublic';\nimport {UrlAdmin} from './urlAdmin';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\nexport class Router extends React.Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/urladmin/\" component={UrlAdmin} />\n                    <Route path=\"/\" component={UrlPubilc} />\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n","import React from 'react';\nimport {Router} from './router';\n\nfunction App() {\n    return (\n        <div>\n            <Router />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}